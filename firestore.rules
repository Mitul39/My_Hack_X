rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users collection rules
    match /users/{userId} {
      // Allow read of user profile by the user themselves or admin
      allow read: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
      
      // Allow create if authenticated and creating their own profile
      allow create: if isAuthenticated() && 
        request.auth.uid == userId &&
        request.resource.data.role == 'user';
        
      // Allow update if user is updating their own profile or is admin
      allow update: if isAuthenticated() &&
        (request.auth.uid == userId || isAdmin()) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) || isAdmin());
        
      // Only admin can delete users
      allow delete: if isAdmin();
    }
    
    // Events collection rules
    match /events/{eventId} {
      // Anyone can read events
      allow read: if true;
      
      // Only admin can create, update, delete events
      allow create, update, delete: if isAdmin();
    }
    
    // Hackathons collection rules
    match /hackathons/{hackathonId} {
      // Anyone can read hackathons
      allow read: if true;
      
      // Only admin can create, update, delete hackathons
      allow create, update, delete: if isAdmin();
    }
    
    // Event registrations collection
    match /eventRegistrations/{registrationId} {
      // Users can read their own registrations, admin can read all
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // Users can create their own registrations
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
        
      // Users can only delete their own registrations, admin can delete any
      allow delete: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());
    }
  }
}